"0","bw <- lapply(WB_sep, FUN = function(x){ks::Hlscv(x@coords)})"
"0",""
"0","## Step two: generate kde"
"0","WB_kde <-mapply(WB_sep,bw,"
"0","                SIMPLIFY = FALSE,"
"0","                FUN = function(x,y){"
"0","                  raster(kde(x@coords,h=y))})"
"0","# This code makes a custom function called getContour. "
"0","# Inputs:"
"0","#    kde = kernel density estimate"
"0","#    prob = probabily - default is 0.95"
"0",""
"0","getContour <- function(kde, prob = 0.95){"
"0","  # set all values 0 to NA"
"0","  kde[kde == 0]<-NA"
"0","  # create a vector of raster values"
"0","  kde_values <- raster::getValues(kde)"
"0","  # sort values "
"0","  sortedValues <- sort(kde_values[!is.na(kde_values)],decreasing = TRUE)"
"0","  # find cumulative sum up to ith location"
"0","  sums <- cumsum(as.numeric(sortedValues))"
"0","  # binary response is value in the probabily zone or not"
"0","  p <- sum(sums <= prob * sums[length(sums)])"
"0","  # Set values in raster to 1 or 0"
"0","  kdeprob <- raster::setValues(kde, kde_values >= sortedValues[p])"
"0","  # return new kde"
"0","  return(kdeprob)}"
"0",""
"0","WB_95kde <- lapply(WB_kde,"
"0","                   FUN = getContour,prob = 0.95)"
"0",""
